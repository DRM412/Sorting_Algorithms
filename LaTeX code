\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage{hyperref}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{algorithmic}
\usepackage{algorithm}
\usepackage{graphicx}
\graphicspath{ {./imagini/} }
\usepackage{pgfplots}
\pgfplotsset{width=11cm,compat=1.9}

\usepackage{listings}
\usepackage{xcolor}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}

\lstset{style=mystyle}

\renewcommand\lstlistingname{Code Fragment}
\renewcommand\lstlistlistingname{Code Fragments}

\title{A theoretical and experimental comparison of sorting algorithms}
\author{Milan Daniel-Andrei\\
Department of Informatics,\\
The Faculty of Mathematics and Informatics, \\
West University of Timisoara, Romania, \\
Email: \href{mailto:daniel.milan04@e-uvt.ro}{\texttt{daniel.milan04@e-uvt.ro}}
}
%\date{May 2023}

\begin{document}

\maketitle
\begin{abstract}
    Sorting algorithms are essential tools in computer science but can also be useful in healthcare to find patients easier, find medical records, they can also be useful in accounting to sort revenue and expenditure of a company, sort through budget or business objects. As sorting algorithms are increasingly important for our comfort it is important to know which are the most efficient. In this paper I measured the time complexity of multiple sorting algorithms.
\end{abstract}


\pagebreak
\tableofcontents
\listoftables
\listoffigures
\lstlistoflistings
\pagebreak

\section{Introduction}

\subsection{Motivation}

The topic addressed in this paper is important because there are a multitude of ways to solve a problem, but not all of them are suitable or efficient to use in every case due to each method's complexity being different in certain cases.

The sorting algorithms that I will talk about in this paper will be:
\begin{itemize}
    \item Bubble Sort
    \item Quick Sort
    \item Merge Sort
    \item Radix Sort
    \item Bucket Sort
    \item Heap Sort
    \item Insertion Sort
\end{itemize}

Each of these is a different method of resolving a sorting problem:
\begin{description}
    \item[Bubble Sort:] Bubble sort is the simplest sorting algorithm besides Insertion sort and very easy to implement but is inefficient for large arrays because it repeatedly compares neighboring elements and swaps them if thy are not in order, which takes a lot of time.
    \item[Quick Sort:] Quick sort is a sorting algorithm based on the divide and conquer method and one of the most efficient sorting algorithms due to its efficient use of memory. Quick sort takes a pivot from the array and splits all the other elements in two sub-arrays and puts the elements that are smaller than the pivot on the left and the elements bigger than the pivot on the right after which it repeats it until there is only one element in the sub-arrays or they are empty.
    \item[Merge Sort:] Merge sort is also a sorting algorithm based on the divide and conquer method and shares a high place with Quick sort. Although Quick sort may be more efficient in terms of memory utilization, Merge sort is a much more stable sorting algorithm. Merge sort splits the array in half until each half only has one element, then it compares the elements of each half and takes (usually) the smaller of the two and moves it to a new array that will become the sorted array.
    \item[Radix Sort:] Radix sort is a non-comparative sorting algorithm often used when the elements are integers(numbers) with a fixed amount of digits. Being a linear-time sorting algorithm, by taking time proportional to the size of the array, makes Radix sort a very good sorting algorithm when sorting a large number of elements. Radix sort finds the largest number in the array and reads it's number of digits, then after taking the first(leftmost) or last(rightmost) element it sorts the array after that element by using a stable sorting algorithm like merge sort.
    \item[Bucket Sort:] Bucket sort is a distribution-based sorting algorithm that separates the array into "buckets". For each "bucket" another sorting algorithm can be used or recursively applying bucket sort is also possible. The speed of Bucket sort is greatly affected by the sorting algorithms used in the "buckets".
    \item[Heap Sort:] Heap sort is a comparison-based sorting algorithm quite efficient for large arrays but suffers the flaw that it requires more memory than Quick sort and Merge sort because it needs to store the heap structure separately, but like merge sort is a more stable sorting algorithm than Quick sort. Heap sort builds a binary heap which turns it into either a max-heap or a min-heap, from witch the maximum or minimum is extracted from the top and added to the sorted array,and repeated until the heap is empty.
    \item[Insertion Sort:] Insertion sort is a simple sorting algorithm often used as base for more complex sorting algorithms. Insertion sort goes through the array and compares each element to he elements already in the sorted array, and puts them in the correct position.
\end{description}

\subsection{Example}

For example we can take Quick sort as it is quite easy to understand.\\

First we have the array, in this case let's say of 6 numbers: [1,6,8,2,15,4]. We can begin by choosing a pivot, like 2. Then we would split the numbers in two, smaller than 2 [1] and bigger tan 2 [6,8,15,4].
We continue to do this with the second resulting sub-array because the first sub-array already has only one element. The second sub-array we will split with the pivot 8 meaning we remain with the sub-arrays smaller than 8 [6,4] and bigger than 8 [15]. Next we only have the sub-array [6,4], here it doesn't matter which you choose as pivot as only one element will remain in the resulting sub-array regardless.\\
The only remaining thing to do now would be to concatenate the sub-arrays in order. So the resulting sorted array would be [1,2,4,6,8,15].\\
We can find the fundamental theory for Quick sort and also some good explanations in 
\label{tab:exercice Quick sort}
\section{Formal Description}

For basic understanding of Sorting Algorithms and more practical examples the best books in my opinion would be Sedgewick's "Algorithms" \cite{sedgewick2011algorithms} and Levitin's "The Design and Analysis of Algorithms" \cite{levitin2012design} from which I took inspiration for the examples used next. Cormen's "Introduction to Algorithms" \cite{cormen2009introduction} is the best of the three in terms of theoretical explanations and is a good learning book for algorithms even if you already have a good amount of knowledge on the subject.

\subsection{Bubble Sort}

Bubble Sort is a simple comparison-based sorting algorithm easy to understand and implement, but extremely inefficient when dealing with large arrays due to it's very slow time complexity of \begin{math} O(n^2) \end{math}. \\
\\
A simple example of Bubble sort would be starting with an array of 6 elements: [5,8,2,1,4,10]. Bubble sort will compare the first two elements [5,8] and it will keep the same positions because 5 is smaller than 8, next it will compare the next two [8,2] and swap them because 2 is smaller than 8 so they are in the wrong order,so the array would look like this:[5,2,8,1,4,10], then it will compare 2 and 5 and swap them because they are in the wrong order, the array would be [2,5,8,1,4,10]. Next the algorithm will compare [8,1] and swap them:[2,5,1,8,4,10], then 5 and 1:[2,1,5,8,4,10] and 2 and 1:[1,2,5,8,4,10].The algorithm will continue until it finishes sorting the list:[1,2,4,5,8,10].\\


\subsection{Quick Sort}

Quick sort is a sorting algorithm based on the divide and conquer method and an extremely efficient sorting algorithm because of its efficient memory usage. It has an average time complexity of \begin{math} O(n*log n) \end{math} and worst case time complexity of \begin{math} O(n^2) \end{math} when the pivot is badly chosen.\\
\\
An easy to understand example for Quick sort can be found here\ref{tab:exercice Quick sort}

\subsection{Merge Sort}

Merge sort, is a sorting algorithm based on the divide and conquer method, and it's a stable sorting algorithm because it keeps the relative order of equal elements in the array. It has the same average and worst case time complexity of \begin{math} O(n * log n) \end{math} making it a good and efficient sorting algorithm.\\
\\
An example of a Merge sort algorithm with an array of 6 elements: [4,2,8,20,12,5]. Merge sort splits the array in half so we have [4,2,8] and [20,12,5]. It continues to split until there is only one element in each sub-array, from [4,2,8] -\textgreater [4,2], [8] -\textgreater [2],[4],[8] doing the same with the other half.
It then merges them together: [2,4,8], [5,12,20] and then merges the two halves together to get the sorted algorithm [2,4,5,8,12,20].

\subsection{Radix Sort}

Radix sort is a non-comparative sorting algorithm and a linear-time sorting algorithm. It has a good time complexity of \begin{math} O(n*m) \end{math} for large arrays. It does however need more memory than other sorting algorithms that are good at sorting large arrays.\\
\\
Example for Radix sort algorithm with an array of 6 elements: [15,26,3,42,8,10]. Radix sort find the biggest element in the array in this case[42] and sorts the array starting with the least significant digit, the ones [10,42,3,15,26,8] then based on the second least significant digit, the decimals:[3,8,10,15,26,42]. Whit the decimals being the most significant digits the resulting array will be [3,8,10,15,26,42].

\subsection{Bucket Sort}

Bucket sort is a distribution-based sorting algorithm that depends a lot on other sorting algorithms for its time complexity as it has an average time complexity of \begin{math} O(n+m) \end{math}
but depending on the sorting algorithms used it can have a better time complexity or worse. For example if the sorting algorithms used are comparison based algorithms then the time complexity will worsen
reaching the worst case time complexity of \begin{math} O(n*log n) \end{math} or if more stable sorting algorithms are used it will have the best case time complexity of \begin{math} O(n) \end{math}.\\
\\
An example for Bucket sort algorithm with an array of 6 elements: [5,16,22,3,74,18]. Bucket sort will make three buckets in which it will put the elements, let's say the first bucket will take from 1 to 10:[5,3], the second from 11 to 30: [16,28,12] and the third one from 31 to 100: [74]. For the first one let's use bubble sort to swap the elements:[3,5], for  the second one we can use radix sort which will swap the elements based on the ones [22,16,18] and then on decimals [16,18,22]. The last one is alone so it's already sorted, so now we concatenate the sorted "buckets" and we get [3,5,16,18,22,74].

\subsection{Heap Sort}

.Heap sort is a comparison-based sorting algorithm that works well when dealing with large arrays but it's pretty inefficient because of it's lack of flexibility, only working in heaps. It has a worst case time complexity of \begin{math} O(n*log n) \end{math}.\\
\\
An example for heap sort we take an array of 6 elements: [5,35,28,61,84,16]. Heap sort will compare the parent nodes with their child nodes. First it will compare the parent [35] with its child nodes left [84] and right [61], as 84 is the biggest one so 35 and 84 will be swapped:[5,84,28,61,35,16] next it will compare [5] with its child nodes [84] and [28],and swap 5 with 84, the same will happen with 61 and 5 making the array [84,61,28,5,35,16]. It will then swap the root with the last element and restore the heap(heapify) the new root [61,28,16,5,35,84]. It will repeatedly do this until the array is sorted [5,16,28,35,61,84].

\subsection{Insertion Sort}

Insertion sort is the simplest sorting algorithm, very easy to implement and needs much less memory compared to other sorting algorithms. It has a worst case time complexity of \begin{math} O(n^2) \end{math}, but it can still be used to help quite effectively in other sorting algorithms like bucket sort.\\
\\
A simple example of using Insertion sort to sort an array of 6 elements:[5,8,11,4,9,24].
Insertion will compare the second element with the one on it's left, in this case [8] will be compared to [5], as 5 is smaller than 8 it will remain in the current position. Next it will compare [11] to [8] and also keep them in same position, [4] will be compared to [11] and will swap positions as 4 is smaller than 11, it will next compare [4] with [8] then swap them, the same will happen with 5:[4,5,8,11]. Next it will compare [9] with [11] and swap them, then it will compare [9] with [8] and keep them in the same position. At last it will compare [24] with [11] but as 11 is smaller than 24 it will keep them the same[4,5,8,9,11,24].

\section{Model and implementation}

The code I used in this paper can be found on my account \href{https://github.com/DRM412/Sorting_Algorithms/blob/main/Sorting%20algorithms%20code}{DRM412 on github}.
\label{tab:code}

\pagebreak
\section{Experiment}

The experimental results from the code \ref{tab:code} can be seen in this table:

\begin{table}[h!]
    \centering
    \begin{tabular}{|r|c|c|c|c|c|c|c|}
\hline\hline
    &1000& 10000& 100000\\
    \hline
Bubble Sort & 760 ms&83487 ms &7692053 ms  \\
Quick Sort &2130 ms &208263 ms &1973971 ms\\
Merge Sort &231 ms &2159 ms  &22041 ms  \\
Radix Sort &1 ms &11 ms &114 ms \\
Bucket Sort &2 ms &19 ms &196 ms \\
Heap Sort &11 ms &115 ms &1178 ms \\
Insertion Sort &9 ms &57 ms &396 ms \\
\hline\hline
    \end{tabular}
    \caption{The table uses the same random generated numbers for all the sorting algorithms}
    \label{tab:table}
\end{table}

\section{Conclusion}

From the experiment we can see that Quick sort and Merge sort take a longer time to sort small arrays but Merge sort who has the same average and worst case time complexity is still faster than Quick sort. We can also see that Bubble sort struggles the most at bigger numbers, the time needed rising exponentially with the bigger numbers regardless of the size of the array. With the way Radix sorts its elements it is no surprise that it is the fastest one to sort large numbers. We can also see that Bucket sort is the second fastest in dealing with large numbers, a result expected as it can use other sorting algorithms, and only needs a little time extra to reach the sorting algorithms it uses and then to concatenate the results. Due to the way Heap sort works although it is a fast sorting algorithm it has the same problem as Bubble sort as it takes more time to compare the parent nodes and child nodes the  bigger the number gets. And finally as we can see Insertion sort although it is good when dealing with small arrays it still takes a bit more time when sorting big numbers, but it is still a solid choice when sorting small arrays even if the elements of the array are big numbers.

\pagebreak

\bibliographystyle{unsrtnat}
\begin{thebibliography}{9}
\bibitem{cormen2009introduction}
Cormen, T. H., Leiserson, C. E., Rivest, R. L., \& Stein, C. (2009).
\textit{Introduction to Algorithms}.
MIT Press.
\bibitem{sedgewick2011algorithms}
Sedgewick, R., \& Wayne, K. (2011).
\textit{Algorithms}.
Addison-Wesley.
\bibitem{levitin2012design}
Levitin, A. (2012).
\textit{The Design and Analysis of Algorithms}.
Pearson Education.
\end{thebibliography}

\end{document}
